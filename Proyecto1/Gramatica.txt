program ::= '{' segmentoA_varios '}' ';';

segmentoA_varios ::= segmentoA_varios segmentoA | segmentoA;

segmentoA ::= 'CONJ' dbPto ID flecha notacion ptoComa
             | 'CONJ' dbPto ID flecha notacionA ptoComa
             | ID flecha exReg ':' arboles.add(new Automata((Nodo_binario) a)); ':';

notacion ::= minus virgulilla minus | mayus virgulilla mayus | nums virgulilla nums | signos virgulilla signos;

notacionA ::= notacionA coma notacionB | notacionB;

notacionB ::= signos | nums | minus | mayus;

exReg ::= concatenacion ':' Nodo_binario padre = new Nodo_binario(a);
            padre.hijo_izq = (Nodo_binario) b;
            padre.hijo_der = (Nodo_binario) c;
            RESULT = padre; ':'
         | disyuncion ':' Nodo_binario padre = new Nodo_binario(a);
            padre.hijo_izq = (Nodo_binario) b;
            padre.hijo_der = (Nodo_binario) c;
            RESULT = padre; ':'
         | estrella ':' Nodo_binario padre = new Nodo_binario(a);
            padre.hijo_der = (Nodo_binario) b;
            RESULT = padre; ':'
         | cerrPositiva ':' Nodo_binario padre = new Nodo_binario(a);
            padre.hijo_der = (Nodo_binario) b;
            RESULT = padre; ':'
         | cerrBooleana ':' Nodo_binario padre = new Nodo_binario(a);
            padre.hijo_der = (Nodo_binario) b;
            RESULT = padre; ':'
         | caracter ':' Nodo_binario hoja = new Nodo_binario(a);
            hoja.setHoja(true);
            hoja.setAnulable(false);
            RESULT = hoja; ':'
         | '{' ID ':' Nodo_binario hoja = new Nodo_binario(a);
            hoja.setHoja(true);
            hoja.setAnulable(false);
            RESULT = hoja; '}' ':';

segmentoB_varios ::= segmentoB_varios segmentoB | segmentoB;

segmentoB ::= ID dbPto cadena ptoComa;
